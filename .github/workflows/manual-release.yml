name: Manual Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (e.g., 0.1.5)"
        required: true
        type: string
      force_release:
        description: "Force release even if tag exists"
        required: false
        type: boolean
        default: false

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: write
  actions: read
  checks: write
  pull-requests: write

jobs:
  extract-version:
    name: Extract Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      raw_version: ${{ steps.version.outputs.raw_version }}
      changelog_content: ${{ steps.changelog.outputs.content }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version
        id: version
        run: |
          # Use the version from manual input
          VERSION="${{ github.event.inputs.version }}"
          echo "version=v$VERSION" >> $GITHUB_OUTPUT
          echo "raw_version=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: v$VERSION"

      - name: Extract changelog for current version
        id: changelog
        run: |
          # Extract changelog section for current version
          CHANGELOG_CONTENT=$(awk '/^## \['"${{ steps.version.outputs.raw_version }}"'\]/{flag=1; next} /^## \[/{flag=0} flag' CHANGELOG.md)
          if [ -z "$CHANGELOG_CONTENT" ]; then
            echo "No changelog found for version ${{ steps.version.outputs.raw_version }}"
            CHANGELOG_CONTENT="See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for details."
          fi
          # Save to temporary file to preserve formatting
          echo "$CHANGELOG_CONTENT" > /tmp/changelog_content.md
          {
            echo 'content<<EOF'
            cat /tmp/changelog_content.md
            echo EOF
          } >> $GITHUB_OUTPUT
  build:
    name: Build ${{ matrix.target }}
    needs: extract-version
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: linux-x86_64
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            name: linux-x86_64-musl
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: linux-aarch64
          - target: x86_64-apple-darwin
            os: macos-latest
            name: darwin-x86_64
          - target: aarch64-apple-darwin
            os: macos-latest
            name: darwin-aarch64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: windows-x86_64
            extension: .exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools
        if: matrix.target == 'x86_64-unknown-linux-musl' || matrix.target == 'aarch64-unknown-linux-gnu' || matrix.target == 'aarch64-unknown-linux-musl'
        run: |
          cargo install cross --git https://github.com/cross-rs/cross

      - name: Install musl tools
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Build binary
        shell: bash
        run: |
          if [ "${{ matrix.target }}" = "x86_64-unknown-linux-gnu" ] || [ "${{ matrix.target }}" = "x86_64-pc-windows-msvc" ] || [ "${{ matrix.target }}" = "x86_64-apple-darwin" ] || [ "${{ matrix.target }}" = "aarch64-apple-darwin" ]; then
            cargo build --release --target ${{ matrix.target }}
          else
            cross build --release --target ${{ matrix.target }}
          fi

      - name: Prepare release asset
        shell: bash
        run: |
          mkdir -p release-assets
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp target/${{ matrix.target }}/release/pori${{ matrix.extension }} release-assets/
            cd release-assets
            powershell -Command "Compress-Archive -Path 'pori${{ matrix.extension }}' -DestinationPath 'pori-${{ matrix.name }}.zip'"
          else
            cp target/${{ matrix.target }}/release/pori release-assets/
            cd release-assets
            tar -czf pori-${{ matrix.name }}.tar.gz pori
          fi

      - name: Upload release asset
        uses: actions/upload-artifact@v4
        with:
          name: pori-${{ matrix.name }}
          path: release-assets/pori-${{ matrix.name }}.*

  release:
    name: Create Release
    needs: [extract-version, build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          find artifacts -type f \( -name "*.tar.gz" -o -name "*.zip" \) -exec cp {} release-assets/ \;
          ls -la release-assets/

      - name: Generate checksums
        run: |
          cd release-assets
          sha256sum * > SHA256SUMS
          cat SHA256SUMS

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.extract-version.outputs.version }}
          name: Release ${{ needs.extract-version.outputs.version }}
          body: |
            ## Changes

            ${{ needs.extract-version.outputs.changelog_content }}

            ## Downloads

            | Platform | Architecture | Download |
            |----------|--------------|----------|
            | Linux | x86_64 | [pori-linux-x86_64.tar.gz](https://github.com/${{ github.repository }}/releases/download/${{ needs.extract-version.outputs.version }}/pori-linux-x86_64.tar.gz) |
            | Linux | x86_64 (musl) | [pori-linux-x86_64-musl.tar.gz](https://github.com/${{ github.repository }}/releases/download/${{ needs.extract-version.outputs.version }}/pori-linux-x86_64-musl.tar.gz) |
            | Linux | ARM64 | [pori-linux-aarch64.tar.gz](https://github.com/${{ github.repository }}/releases/download/${{ needs.extract-version.outputs.version }}/pori-linux-aarch64.tar.gz) |
            | macOS | x86_64 | [pori-darwin-x86_64.tar.gz](https://github.com/${{ github.repository }}/releases/download/${{ needs.extract-version.outputs.version }}/pori-darwin-x86_64.tar.gz) |
            | macOS | ARM64 | [pori-darwin-aarch64.tar.gz](https://github.com/${{ github.repository }}/releases/download/${{ needs.extract-version.outputs.version }}/pori-darwin-aarch64.tar.gz) |
            | Windows | x86_64 | [pori-windows-x86_64.zip](https://github.com/${{ github.repository }}/releases/download/${{ needs.extract-version.outputs.version }}/pori-windows-x86_64.zip) |

            ## Installation

            ### Linux/macOS Quick Install
            ```bash
            curl -fsSL https://raw.githubusercontent.com/${{ github.repository }}/main/release/install.sh | bash
            ```

            ### Manual Installation
            1. Download the appropriate binary for your platform
            2. Extract the archive
            3. Move the binary to a directory in your PATH
            4. Make it executable (Linux/macOS): `chmod +x pori`

            ## Verification

            Verify the integrity of downloaded files using the provided checksums:
            ```bash
            sha256sum -c SHA256SUMS
            ```
          files: |
            release-assets/*
          draft: false
          prerelease: false
          generate_release_notes: false
          fail_on_unmatched_files: false
          target_commitish: ${{ github.sha }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test-install:
    name: Test Installation Script
    needs: [extract-version, release]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Test installation script
        run: |
          chmod +x release/install.sh
          # Test dry run
          bash release/install.sh --dry-run
